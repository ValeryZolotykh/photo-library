{"version":3,"file":"static/js/305.e656c4e2.chunk.js","mappings":"yJACO,MAAMA,EAAY,IACZC,EAAY,IAGZC,EAAmB,EAGnBC,EAAoB,W,8FCDlB,SAASC,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAUC,IAAeC,EAAAA,EAAAA,UAAiB,KAC3C,GAAEC,IAAOC,EAAAA,EAAAA,MACRC,EAAoBC,IAAyBJ,EAAAA,EAAAA,UAClD,KAGFK,EAAAA,EAAAA,YAAU,KAER,MAAMC,EAAkBC,aAAaC,QAAQd,EAAAA,IAG7C,GAAIY,EAAiB,CACnBF,EAAsBK,KAAKC,MAAMJ,IACjC,MAAMK,EAASF,KAAKC,MAAMJ,GACtBL,GAAIF,EAAYY,EAAOC,SAASX,IACtC,IACC,CAACA,IAwBJ,OACEY,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAsBG,IAAKnB,EAAUoB,IAAI,oBACxDF,EAAAA,EAAAA,KAAA,UACEF,UAAU,wBACVK,QAASA,IAvBMC,KACnB,GAAIA,EAAkB,CAEpB,MAAMC,EAAclB,EAAmBmB,QACpCxB,GAAaA,IAAasB,IAI7Bb,aAAagB,QAAQ7B,EAAAA,GAAmBe,KAAKe,UAAUH,IAGvDzB,EAAS,cACT6B,EAAAA,GAAMC,QAAQ,6CAChB,MACED,EAAAA,GAAME,MAAM,oBACd,EAQmBC,CAAY9B,GAAUiB,SACtC,4BAKP,C","sources":["common/constants/constants.ts","pages/Single-photo/Single-photo.tsx"],"sourcesContent":["// Minimum and maximum values for the random delay range (im ms)\r\nexport const MIN_DELAY = 200;\r\nexport const MAX_DELAY = 300;\r\n\r\n// Additional gap in pixels when scrolling\r\nexport const SCROLL_THRESHOLD = 1; \r\n\r\n// Key for storing photos in local storage\r\nexport const LOCAL_STORAGE_KEY = \"photoUrls\"; ","import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./single-photo.scss\";\r\nimport { toast } from \"react-toastify\";\r\nimport { LOCAL_STORAGE_KEY } from \"../../common/constants/constants\";\r\n\r\nexport default function SinglePhoto() {\r\n  const navigate = useNavigate();\r\n  const [photoUrl, setPhotoUrl] = useState<string>(\"\");\r\n  const { id } = useParams();\r\n  const [favoritesPhotoUrls, setFavoritesPhotoUrls] = useState<Array<string>>(\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Retrieve stored photo URLs from local storage\r\n    const storedPhotoUrls = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n\r\n    // If there are stored photo URLs available:\r\n    if (storedPhotoUrls) {\r\n      setFavoritesPhotoUrls(JSON.parse(storedPhotoUrls));\r\n      const photos = JSON.parse(storedPhotoUrls);\r\n      if (id) setPhotoUrl(photos[parseInt(id)]);\r\n    }\r\n  }, [id]);\r\n\r\n  /**\r\n   * Deleting photo from favorites.\r\n   * @param urlPhotoToDelete URL of the photo to be deleted\r\n   */\r\n  const removePhoto = (urlPhotoToDelete: string | undefined) => {\r\n    if (urlPhotoToDelete) {\r\n      // Create a new array without elements that match a certain condition.\r\n      const updatedUrls = favoritesPhotoUrls.filter(\r\n        (photoUrl) => photoUrl !== urlPhotoToDelete\r\n      );\r\n\r\n      // Update the stored photo URLs in local storage\r\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(updatedUrls));\r\n\r\n      // Navigate to the back\r\n      navigate(\"/favorites\");\r\n      toast.success(\"Photo successfully removed from favorites!\"); // Display success message\r\n    } else {\r\n      toast.error(\"Error! Try again.\"); // Display error message if URL is undefined\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"single-photo__wrapper\">\r\n      <img className=\"single-photo__image\" src={photoUrl} alt=\"favorite_photo\" />\r\n      <button\r\n        className=\"btn single-photo__btn\"\r\n        onClick={() => removePhoto(photoUrl)}\r\n      >\r\n        Remove from favorites\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["MIN_DELAY","MAX_DELAY","SCROLL_THRESHOLD","LOCAL_STORAGE_KEY","SinglePhoto","navigate","useNavigate","photoUrl","setPhotoUrl","useState","id","useParams","favoritesPhotoUrls","setFavoritesPhotoUrls","useEffect","storedPhotoUrls","localStorage","getItem","JSON","parse","photos","parseInt","_jsxs","className","children","_jsx","src","alt","onClick","urlPhotoToDelete","updatedUrls","filter","setItem","stringify","toast","success","error","removePhoto"],"sourceRoot":""}