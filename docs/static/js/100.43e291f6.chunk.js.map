{"version":3,"file":"static/js/100.43e291f6.chunk.js","mappings":"yJACO,MAAMA,EAAY,IACZC,EAAY,IAGZC,EAAmB,EAGnBC,EAAoB,W,8FCHlB,SAASC,EAAQC,GAAyC,IAAxC,UAAEC,GAAmCD,EA2BpE,OACEE,EAAAA,EAAAA,MAAA,OACEC,UAAU,gBACVC,QAASA,IA5BgBC,KAE3B,MAAMC,EAAkBC,aAAaC,QAAQV,EAAAA,IAC7C,IAAIW,EAA6B,GAMjC,GAHIH,IAAiBG,EAAmBC,KAAKC,MAAML,IAG9CG,EAAiBG,SAASP,GAY7BQ,EAAAA,GAAMC,QAAQ,kCAZqB,CAGnC,MAAMC,EAAuB,IAAIN,EAAkBJ,GAGnDE,aAAaS,QACXlB,EAAAA,GACAY,KAAKO,UAAUF,IAEjBF,EAAAA,GAAMK,QAAQ,yCAChB,CAEA,EAMiBC,CAAoBlB,EAAUI,KAAKe,SAAA,EAElDC,EAAAA,EAAAA,KAAA,OAAKlB,UAAU,eAAemB,IAAKrB,EAAUI,IAAKkB,IAAI,eAAeC,QAAQ,UAC7EH,EAAAA,EAAAA,KAAA,QAAMlB,UAAU,oBAGtB,CCjCe,SAASsB,IACtB,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAAoB,KACzCJ,EAASK,IAAcD,EAAAA,EAAAA,WAAkB,IAEhDE,EAAAA,EAAAA,YAAU,KACRC,IACAC,OAAOC,iBAAiB,SAAUC,GAC3B,IAAMF,OAAOG,oBAAoB,SAAUD,KACjD,IAKH,MAAMH,EAAcK,UAElBP,GAAW,GAGXQ,YAAW,KAET,MAAMC,EAAeC,MAAMC,KAAK,CAAEC,OAAQ,IAAK,MAC7CpC,IAAKqC,EAAAA,GAAMC,MAAMC,sBAInBjB,GAAWkB,GAAe,IAAIA,KAAeP,KAG7CT,GAAW,EAAM,GAChBiB,KAAKC,MAAMD,KAAKE,UAAYpD,EAAAA,GAAYD,EAAAA,GAAY,IAAMA,EAAAA,GAAU,EAMnEuC,EAAeA,KAIjBF,OAAOiB,YAAcC,SAASC,gBAAgBC,WAC9CF,SAASC,gBAAgBE,aAAexD,EAAAA,IAExCkC,GACF,EAGIuB,EAAa5B,EAAO6B,KAAI,CAACC,EAAOC,KACpCpC,EAAAA,EAAAA,KAACtB,EAAQ,CAAaE,UAAWuD,GAAlBC,KAIjB,OACEvD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBiB,SAAA,CAC7BkC,EACA9B,IAAWH,EAAAA,EAAAA,KAAA,OAAKlB,UAAU,iBAAgBiB,SAAC,iBAGlD,C","sources":["common/constants/constants.ts","pages/Photos/components/One-photo.tsx","pages/Photos/Photos.tsx"],"sourcesContent":["// Minimum and maximum values for the random delay range (im ms)\r\nexport const MIN_DELAY = 200;\r\nexport const MAX_DELAY = 300;\r\n\r\n// Additional gap in pixels when scrolling\r\nexport const SCROLL_THRESHOLD = 1; \r\n\r\n// Key for storing photos in local storage\r\nexport const LOCAL_STORAGE_KEY = \"photoUrls\"; ","import { toast } from \"react-toastify\";\r\nimport \"./one-photo.scss\";\r\nimport { IPhotos } from \"../../../common/interfaces/Photos\";\r\nimport { LOCAL_STORAGE_KEY } from \"../../../common/constants/constants\";\r\n\r\nexport default function OnePhoto({ photoData }: { photoData: IPhotos }) {\r\n\r\n  const addPhotoToFavorites = (url: string) => {\r\n    // Retrieve stored photo URLs from local storage\r\n    const storedPhotoUrls = localStorage.getItem(LOCAL_STORAGE_KEY);\r\n    let currentFavorites: string[] = [];\r\n\r\n    // Check if there are any stored photo URLs\r\n    if (storedPhotoUrls) currentFavorites = JSON.parse(storedPhotoUrls);\r\n\r\n    // Check if the provided URL is not already in favorites\r\n    if (!currentFavorites.includes(url)) {\r\n\r\n      //Adding the url of the new image by combining the previous photos with the new ones\r\n      const newSelectedPhotoUrls = [...currentFavorites, url];\r\n      \r\n      // Update the stored photo URLs in local storage\r\n      localStorage.setItem(\r\n        LOCAL_STORAGE_KEY,\r\n        JSON.stringify(newSelectedPhotoUrls)\r\n      );\r\n      toast.success(\"Photo successfully added to favorites!\"); // Display success message\r\n    } else {\r\n      toast.warning(\"Photo already in favorites\"); // Display warning message\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"photos__items\"\r\n      onClick={() => addPhotoToFavorites(photoData.url)}\r\n    >\r\n      <img className=\"photos__item\" src={photoData.url} alt=\"random_image\" loading=\"lazy\"/>\r\n      <span className=\"photos__heart\"></span>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { faker } from \"@faker-js/faker\";\r\nimport \"./photos.scss\";\r\nimport OnePhoto from \"./components/One-photo\";\r\nimport { IPhotos } from \"../../common/interfaces/Photos\";\r\nimport { MIN_DELAY, MAX_DELAY } from \"../../common/constants/constants\";\r\nimport { SCROLL_THRESHOLD } from \"../../common/constants/constants\";\r\n\r\nexport default function Photos() {\r\n  const [photos, setPhotos] = useState<IPhotos[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    fetchPhotos();\r\n    window.addEventListener(\"scroll\", handleScroll); // Add event listener to track scrolling behavior\r\n    return () => window.removeEventListener(\"scroll\", handleScroll); // Cleanup function to remove event listener when component unmounts\r\n  }, []);\r\n\r\n  /**\r\n   * Loading random photos.\r\n   */\r\n  const fetchPhotos = async () => {\r\n    //Indication of the start of data loading\r\n    setLoading(true);\r\n\r\n    // Emulate loading delay\r\n    setTimeout(() => {\r\n      // Generate an array of new ramson photos using faker library\r\n      const randomPhotos = Array.from({ length: 6 }, () => ({\r\n        url: faker.image.urlPicsumPhotos()\r\n      }));\r\n\r\n      // Update the photos state by combining the previous photos with the new ones\r\n      setPhotos((prevPhotos) => [...prevPhotos, ...randomPhotos]);\r\n\r\n      //Indicating data fetching is complete\r\n      setLoading(false);\r\n    }, Math.floor(Math.random() * (MAX_DELAY - MIN_DELAY + 1)) + MIN_DELAY); // Calculate the delay before fetching within the specified range(200ms-300ms)\r\n  };\r\n\r\n  /**\r\n   * Check if user has scrolled to the bottom of the page, then we fetch more photos to implement infinite scrolling.\r\n   */\r\n  const handleScroll = () => {\r\n    /* Check if the sum of the current viewport height and the scroll position is greater than or equal to\r\n    the total height of the document minus a gap.*/\r\n    if (\r\n      window.innerHeight + document.documentElement.scrollTop >=\r\n      document.documentElement.offsetHeight - SCROLL_THRESHOLD // Add a gap of 100px\r\n    ) {\r\n      fetchPhotos(); // Load more photos\r\n    }\r\n  };\r\n\r\n  const photosList = photos.map((photo, index) => (\r\n    <OnePhoto key={index} photoData={photo} />\r\n  ));\r\n\r\n\r\n  return (\r\n    <div className=\"photos__wrapper\">\r\n      {photosList}\r\n      {loading && <div className=\"photos__loader\">Loading...</div>}\r\n    </div>\r\n  );\r\n}\r\n"],"names":["MIN_DELAY","MAX_DELAY","SCROLL_THRESHOLD","LOCAL_STORAGE_KEY","OnePhoto","_ref","photoData","_jsxs","className","onClick","url","storedPhotoUrls","localStorage","getItem","currentFavorites","JSON","parse","includes","toast","warning","newSelectedPhotoUrls","setItem","stringify","success","addPhotoToFavorites","children","_jsx","src","alt","loading","Photos","photos","setPhotos","useState","setLoading","useEffect","fetchPhotos","window","addEventListener","handleScroll","removeEventListener","async","setTimeout","randomPhotos","Array","from","length","faker","image","urlPicsumPhotos","prevPhotos","Math","floor","random","innerHeight","document","documentElement","scrollTop","offsetHeight","photosList","map","photo","index"],"sourceRoot":""}